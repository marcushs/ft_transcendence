services:

  # ---------------> FRONTEND <--------------- #
  frontend:
    container_name: frontend
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    image: frontend
    volumes:
      - ./src/frontend/static:/var/www/static
      - ./src/frontend/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "3000:443"
    depends_on:
      - auth
      - user
      - chat
      - friends
      - notifications
      - twofactor
      - oauth42
      - oauthgithub
      - oauthgoogle
      - matchmaking
      - game
      - statistics
    networks:
      - transcendence-network


  # ---------------> USER <--------------- #

  # Service
  user:
    container_name: user
    restart: always
    build:
      context: ./src/backend/user_service
      dockerfile: docker/Dockerfile
    image: user
    env_file: ./src/backend/.env
    command: >
      sh -c "
        python3 manage.py makemigrations &&
        python3 manage.py migrate &&
        python3 manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./src/backend/user_service:/app 
    depends_on:
      user_db:
        condition: service_healthy
    networks:
      - transcendence-network

  # DB
  user_db:
    container_name: user_db
    image: postgres
    restart: always
    env_file: ./src/backend/.env
    environment:
      - POSTGRES_USER=${USER_DB_USER}
      - POSTGRES_DB=${USER_DB_NAME}
      - POSTGRES_PASSWORD=${USER_DB_PASSWORD}
    shm_size: 128mb
    volumes:
      - user_pgdata:/var/lib/postgresql/data
    networks:
      - transcendence-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${USER_DB_USER} -d ${USER_DB_NAME}" ]
      interval: 8s
      timeout: 5s
      retries: 5


  # ---------------> AUTH <--------------- #

  # Service
  auth:
    container_name: auth
    restart: always
    build:
      context: ./src/backend/auth_service
      dockerfile: docker/Dockerfile
    image: auth
    env_file: ./src/backend/.env
    command: >
      sh -c "
        python3 manage.py makemigrations &&
        python3 manage.py migrate &&
        python3 manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./src/backend/auth_service:/app
    depends_on:
      auth_db:
        condition: service_healthy
    networks:
      - transcendence-network

  # DB
  auth_db:
    container_name: auth_db
    image: postgres
    restart: always
    env_file: ./src/backend/.env
    environment:
      - POSTGRES_USER=${AUTH_DB_USER}
      - POSTGRES_DB=${AUTH_DB_NAME}
      - POSTGRES_PASSWORD=${AUTH_DB_PASSWORD}
    shm_size: 128mb
    volumes:
      - auth_pgdata:/var/lib/postgresql/data
    networks:
      - transcendence-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${AUTH_DB_USER} -d ${AUTH_DB_NAME}" ]
      interval: 8s
      timeout: 5s
      retries: 5


  # ---------------> TWOFACTOR <--------------- #

  # Service
  twofactor:
    container_name: twofactor
    restart: always
    build:
      context: ./src/backend/twofactor_service
      dockerfile: docker/Dockerfile
    image: twofactor
    env_file: ./src/backend/.env
    command: >
      sh -c "
          python3 manage.py makemigrations &&
          python3 manage.py migrate &&
          python3 manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./src/backend/twofactor_service:/app
    depends_on:
      twofactor_db:
        condition: service_healthy
    networks:
      - transcendence-network

  # DB
  twofactor_db:
    container_name: twofactor_db
    image: postgres
    restart: always
    env_file: ./src/backend/.env
    environment:
      - POSTGRES_USER=${TWOFACTOR_DB_USER}
      - POSTGRES_DB=${TWOFACTOR_DB_NAME}
      - POSTGRES_PASSWORD=${TWOFACTOR_DB_PASSWORD}
    shm_size: 128mb
    volumes:
      - twofactor_pgdata:/var/lib/postgresql/data
    networks:
      - transcendence-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${TWOFACTOR_DB_USER} -d ${TWOFACTOR_DB_NAME}" ]
      interval: 8s
      timeout: 5s
      retries: 5


 # ---------------> FRIENDS <--------------- #

  # Service
  friends:
    container_name: friends
    restart: always
    build:
      context: ./src/backend/friends_service
      dockerfile: docker/Dockerfile
    image: friends
    env_file: ./src/backend/.env
    command: >
      sh -c "
        python3 manage.py makemigrations &&
        python3 manage.py migrate &&
        python3 manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./src/backend/friends_service:/app
    depends_on:
      friends_db:
        condition: service_healthy
    networks:
      - transcendence-network

  # DB
  friends_db:
    container_name: friends_db
    image: postgres
    restart: always
    env_file: ./src/backend/.env
    environment:
      - POSTGRES_USER=${FRIENDS_DB_USER}
      - POSTGRES_DB=${FRIENDS_DB_NAME}
      - POSTGRES_PASSWORD=${FRIENDS_DB_PASSWORD}
    shm_size: 128mb
    volumes:
      - friends_pgdata:/var/lib/postgresql/data
    networks:
      - transcendence-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${FRIENDS_DB_USER} -d ${FRIENDS_DB_NAME}" ]
      interval: 8s
      timeout: 5s
      retries: 5


  # -----> NOTIFICATIONS <----- #

  # Service
  notifications:
    container_name: notifications
    restart: always
    build:
      context: ./src/backend/notifications_service
      dockerfile: docker/Dockerfile
    image: notifications
    env_file: ./src/backend/.env
    command: >
      sh -c "
        python3 manage.py makemigrations &&
        python3 manage.py migrate &&
        python3 manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./src/backend/notifications_service:/app
    depends_on:
      notifications_db:
        condition: service_healthy
    networks:
      - transcendence-network

  # DB
  notifications_db:
    container_name: notifications_db
    image: postgres
    restart: always
    env_file: ./src/backend/.env
    environment:
      - POSTGRES_USER=${NOTIFICATIONS_DB_USER}
      - POSTGRES_DB=${NOTIFICATIONS_DB_NAME}
      - POSTGRES_PASSWORD=${NOTIFICATIONS_DB_PASSWORD}
    shm_size: 128mb
    volumes:
      - notifications_pgdata:/var/lib/postgresql/data
    networks:
      - transcendence-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${NOTIFICATIONS_DB_USER} -d ${NOTIFICATIONS_DB_NAME}" ]
      interval: 8s
      timeout: 5s
      retries: 5


  # Game
  game:
    container_name: game
    restart: always
    build:
      context: ./src/backend/game_service
      dockerfile: docker/Dockerfile
    image: game
    env_file: ./src/backend/.env
    command: >
      sh -c "
        python3 manage.py migrate &&
        python3 manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./src/backend/game_service:/app
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - transcendence-network

  # Matchmaking

  matchmaking:
    container_name: matchmaking
    restart: always
    build:
      context: ./src/backend/matchmaking_service
      dockerfile: docker/Dockerfile
    image: matchmaking
    env_file: ./src/backend/.env
    command: >
      sh -c "
        python3 manage.py makemigrations &&
        python3 manage.py migrate &&
        python3 manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./src/backend/matchmaking_service:/app
    depends_on:
      matchmaking_db:
        condition: service_healthy
    networks:
      - transcendence-network

  # MATCHMAKING
  matchmaking_db:
    container_name: matchmaking_db
    image: postgres
    restart: always
    env_file: ./src/backend/.env
    environment:
      - POSTGRES_USER=${MATCHMAKING_DB_USER}
      - POSTGRES_DB=${MATCHMAKING_DB_NAME}
      - POSTGRES_PASSWORD=${MATCHMAKING_DB_PASSWORD}
    shm_size: 128mb
    volumes:
      - matchmaking_pgdata:/var/lib/postgresql/data
    networks:
      - transcendence-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${MATCHMAKING_DB_USER} -d ${MATCHMAKING_DB_NAME}" ]
      interval: 8s
      timeout: 5s
      retries: 5


 # -----> Statistics <----- #

  # Service
  statistics:
    container_name: statistics
    restart: always
    build:
      context: ./src/backend/statistics_service
      dockerfile: docker/Dockerfile
    image: statistics
    env_file: ./src/backend/.env
    command: >
      sh -c "
        python3 manage.py makemigrations &&
        python3 manage.py migrate &&
        python3 manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./src/backend/statistics_service:/app
    depends_on:
      statistics_db:
        condition: service_healthy
    networks:
      - transcendence-network

  # DB
  statistics_db:
    container_name: statistics_db
    image: postgres
    restart: always
    env_file: ./src/backend/.env
    environment:
      - POSTGRES_USER=${STATISTICS_DB_USER}
      - POSTGRES_DB=${STATISTICS_DB_NAME}
      - POSTGRES_PASSWORD=${STATISTICS_DB_PASSWORD}
    shm_size: 128mb
    volumes:
      - statistics_pgdata:/var/lib/postgresql/data
    networks:
      - transcendence-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${STATISTICS_DB_USER} -d ${STATISTICS_DB_NAME}" ]
      interval: 8s
      timeout: 5s
      retries: 5

  # -----> OAUTH_42 <----- #

  # Service
  oauth42:
    container_name: oauth42
    restart: always
    build:
      context: ./src/backend/oauth42_service
      dockerfile: docker/Dockerfile
    image: oauth42
    env_file:
      - ./src/backend/.env
    command: >
      sh -c "
          python3 manage.py makemigrations &&
          python3 manage.py migrate &&
          python3 manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./src/backend/oauth42_service:/app
    depends_on:
      oauth42_db:
        condition: service_healthy
    networks:
      - transcendence-network

  # DB
  oauth42_db:
    container_name: oauth42_db
    image: postgres
    restart: always
    env_file: ./src/backend/.env
    environment:
      - POSTGRES_USER=${OAUTH_42_DB_USER}
      - POSTGRES_DB=${OAUTH_42_DB_NAME}
      - POSTGRES_PASSWORD=${OAUTH_42_DB_PASSWORD}
    shm_size: 128mb
    volumes:
      - oauth42_pgdata:/var/lib/postgresql/data
    networks:
      - transcendence-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${OAUTH_42_DB_USER} -d ${OAUTH_42_DB_NAME}"]
      interval: 4s
      timeout: 3s
      retries: 5

  # -----> OAUTH_GOOGLE <----- #

  # Service
  oauthgoogle:
    container_name: oauthgoogle
    restart: always
    build:
      context: ./src/backend/oauthgoogle_service
      dockerfile: docker/Dockerfile
    image: oauthgoogle
    env_file:
      - ./src/backend/.env
    command: >
      sh -c "
          python3 manage.py makemigrations &&
          python3 manage.py migrate &&
          python3 manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./src/backend/oauthgoogle_service:/app
    depends_on:
      oauthgoogle_db:
        condition: service_healthy
    networks:
      - transcendence-network

  # DB
  oauthgoogle_db:
    container_name: oauthgoogle_db
    image: postgres
    restart: always
    env_file: ./src/backend/.env
    environment:
      - POSTGRES_USER=${OAUTH_GOOGLE_DB_USER}
      - POSTGRES_DB=${OAUTH_GOOGLE_DB_NAME}
      - POSTGRES_PASSWORD=${OAUTH_GOOGLE_DB_PASSWORD}
    shm_size: 128mb
    volumes:
      - oauthgoogle_pgdata:/var/lib/postgresql/data
    networks:
      - transcendence-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${OAUTH_GOOGLE_DB_USER} -d ${OAUTH_GOOGLE_DB_NAME}"]
      interval: 4s
      timeout: 3s
      retries: 5

  # -----> OAUTH_GITHUB <----- #

  # Service
  oauthgithub:
    container_name: oauthgithub
    restart: always
    build:
      context: ./src/backend/oauthgithub_service
      dockerfile: docker/Dockerfile
    image: oauthgithub
    env_file:
      - ./src/backend/.env
    command: >
      sh -c "
          python3 manage.py makemigrations &&
          python3 manage.py migrate &&
          python3 manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./src/backend/oauthgithub_service:/app
    depends_on:
      oauthgithub_db:
        condition: service_healthy
    networks:
      - transcendence-network

  # DB
  oauthgithub_db:
    container_name: oauthgithub_db
    image: postgres
    restart: always
    env_file: ./src/backend/.env
    environment:
      - POSTGRES_USER=${OAUTH_GITHUB_DB_USER}
      - POSTGRES_DB=${OAUTH_GITHUB_DB_NAME}
      - POSTGRES_PASSWORD=${OAUTH_GITHUB_DB_PASSWORD}
    shm_size: 128mb
    volumes:
      - oauthgithub_pgdata:/var/lib/postgresql/data
    networks:
      - transcendence-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${OAUTH_GITHUB_DB_USER} -d ${OAUTH_GITHUB_DB_NAME}"]
      interval: 4s
      timeout: 3s
      retries: 5

  # -----> CHAT <----- #

  # Service
  chat:
    container_name: chat
    restart: always
    build:
      context: ./src/backend/chat_service
      dockerfile: docker/Dockerfile
    image: chat
    env_file:
      - ./src/backend/.env
    command: >
      sh -c "
          python3 manage.py makemigrations &&
          python3 manage.py migrate &&
          python3 manage.py runserver 0.0.0.0:8000 &&
          daphne -v 2 chat_service.asgi:application
      "
    volumes:
      - ./src/backend/chat_service:/app
    depends_on:
      - chat_redis
      - chat_db
    networks:
      - transcendence-network

  # DB
  chat_db:
    container_name: chat_db
    image: postgres
    restart: always
    env_file: ./src/backend/.env
    environment:
      - POSTGRES_USER=${CHAT_DB_USER}
      - POSTGRES_DB=${CHAT_DB_NAME}
      - POSTGRES_PASSWORD=${CHAT_DB_PASSWORD}
    shm_size: 128mb
    volumes:
      - chat_pgdata:/var/lib/postgresql/data
    networks:
      - transcendence-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CHAT_DB_USER} -d ${CHAT_DB_NAME}"]
      interval: 8s
      timeout: 5s
      retries: 5

  # -----> TOURNAMENT <----- #

  # Service
  tournament:
    container_name: tournament
    restart: always
    build:
      context: ./src/backend/tournament_service
      dockerfile: docker/Dockerfile
    image: tournament
    env_file:
      - ./src/backend/.env
    command: >
      sh -c "
          python3 manage.py makemigrations &&
          python3 manage.py migrate &&
          python3 manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./src/backend/tournament_service:/app
    depends_on:
      - tournament_db
    networks:
      - transcendence-network

  # DB
  tournament_db:
    container_name: tournament_db
    image: postgres
    restart: always
    env_file: ./src/backend/.env
    environment:
      - POSTGRES_USER=${TOURNAMENT_DB_USER}
      - POSTGRES_DB=${TOURNAMENT_DB_NAME}
      - POSTGRES_PASSWORD=${TOURNAMENT_DB_PASSWORD}
    shm_size: 128mb
    volumes:
      - tournament_pgdata:/var/lib/postgresql/data
    networks:
      - transcendence-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TOURNAMENT_DB_USER} -d ${TOURNAMENT_DB_NAME}"]
      interval: 8s
      timeout: 5s
      retries: 5

  # ---------------> REDIS <---------------

  # Service
  redis:
    container_name: redis
    restart: always
    image: redis:latest
    networks:
      - transcendence-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 8s
      timeout: 5s
      retries: 5

  # --> CHANNEL LAYER REDIS <-- #

  # Service
  chat_redis:
    container_name: chat_redis
    image: redis
    restart: always
    networks:
    - transcendence-network


volumes:
  user_pgdata:
    name: user_data
  auth_pgdata:
    name: auth_data
  twofactor_pgdata:
    name: twofactor_data
  friends_pgdata:
    name: friends_data
  notifications_pgdata:
    name: notifications_data
  matchmaking_pgdata:
    name: matchmaking_data
  statistics_pgdata:
    name: statistics_data
  oauth42_pgdata:
    name: oauth42_data
  oauthgoogle_pgdata:
    name: oauthgoogle_data
  oauthgithub_pgdata:
    name: oauthgithub_data
  chat_pgdata:
    name: chat_data
  tournament_pgdata:
    name: tournament_data

networks:
  transcendence-network:
    name: transcendence-network
    driver: bridge
